- name: get subnet_id
  ec2_vpc_subnet_facts:
    region: "{{ ec2.region | default('ap-northeast-1') }}"
    filters:
      "tag:Name": "{{ ec2.vpc_subnets }}"
  register: subnet_fact

- name: build EC2 instance(s)
  ec2:
    image: "{{ ec2.ami_id }}"
    vpc_subnet_id: "{{ item.id }}"
    instance_type: "{{ ec2.instance_type | default('t2.medium') }}"
    region: "{{ ec2.region | default('ap-northeast-1') }}" # see https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#using-regions-availability-zones-describe
    zone: "{{ item.availability_zone }}"
    key_name: "{{ ec2.key_name | default('default') }}"
    monitoring: "{{ ec2.monitoring | default('yes') }}"
    group: "{{ ec2.group }}" # security group (or list of groups)
    instance_tags:
      Name: "{{ ec2.tag_name }}"
    wait: yes
    volumes:
      - device_name: "{{ ec2.device_name | default('/dev/sda1') }}" # sda1 == root volume
        volume_type: "{{ ec2.volume_type | default('gp2') }}"
        volume_size: "{{ ec2.volume_size | default('8') }}" # GB
        delete_on_termination: "{{ delete_on_termination | default('false') }}"
    count_tag:
      Name: "{{ ec2.tag_name }}"
    exact_count: "{{ ec2.exact_count | default(1) }}"
  with_items: "{{ subnet_fact.subnets }}"
  register: ec2_fact

- name: wait_for SSH
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    timeout: 300
    state: started
  with_subelements:
    - "{{ ec2_fact.results }}"
    - instances

- name: refresh meta
  meta: refresh_inventory
